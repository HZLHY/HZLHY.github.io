<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BUUCTF_WEB on LHY&#39;s blogs</title>
    <link>https://hzlhy.github.io/tags/buuctf_web/</link>
    <description>Recent content in BUUCTF_WEB on LHY&#39;s blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Mar 2021 15:32:23 +0800</lastBuildDate><atom:link href="https://hzlhy.github.io/tags/buuctf_web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BUUCTF_WEB_part1</title>
      <link>https://hzlhy.github.io/ctf/buuctf_web_part1/</link>
      <pubDate>Fri, 26 Mar 2021 15:32:23 +0800</pubDate>
      
      <guid>https://hzlhy.github.io/ctf/buuctf_web_part1/</guid>
      <description>1.[BJDCTF2020]Easy MD5 0x0 一打开发现是一个查询页面，按F12，看到响应头Hint: select * from &#39;admin&#39; where password=md5($pass,true)初步以为是sql注入，试了一下（因为太菜+懒，也没怎么试就去找wp了……）；发现md5($pass,true)是一个知识点来的，可以参考这篇大佬的文章：大佬文章
语法：
md5(string,raw)
   参数 描述     string 必需。需要计算的字符串。   raw 可选。1.默认不写为FALSE。32位16进制的字符串；2.TRUE。16位原始二进制格式的字符串。     ；content: ffifdyop
hex: 276f722736c95d99e921722cf9ed621c
raw: &amp;lsquo;or&#39;6\xc9]\x99\xe9!r,\xf9\xedb\x1c
string: &amp;lsquo;or&#39;6]!r,b
 注意：当raw为true时，这里所说的原始二进制并不是普通的二进制0，1，而是像上面表里raw那样的；
（部分字符会乱码）
题目中 &#39;&#39;or&#39;6�]��!r,��b&#39;会返回true，是因为在MySQL里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，如password=‘xxx’ or ‘1xxxxxxxxx’，不只是1开头，只要是数字开头都可以。
0x1 回到题目，照上面所说的，输入 ffifdyop提交查询出现一个新的页面，查看源码
&amp;lt;!-- $a = $GET[&amp;#39;a&amp;#39;]; $b = $_GET[&amp;#39;b&amp;#39;]; if($a != $b &amp;amp;&amp;amp; md5($a) == md5($b)){ // wow, glzjin wants a girl friend. --&amp;gt; ==老朋友了，同时要使这两个的md5相等，这里抄了别人的wp，有两种方法：</description>
    </item>
    
    <item>
      <title>BUUCTF_WEB_part0</title>
      <link>https://hzlhy.github.io/ctf/buuctf_web_part0/</link>
      <pubDate>Thu, 25 Mar 2021 15:04:29 +0800</pubDate>
      
      <guid>https://hzlhy.github.io/ctf/buuctf_web_part0/</guid>
      <description>1.[HCTF]BUUCTF_warmup 查看源码发现source.php，访问发现是代码审计
1.PHP mb_substr()函数：
&amp;lt;?php echo mb_substr(&amp;quot;菜鸟教程&amp;quot;, 0, 2); // 输出：菜鸟 ?&amp;gt;
返回字符串的一部分
2.PHP mb_strpos()
查找字符串在另一个字符串中首次出现的位置
3.PHP $_REQUEST是用于收集HTML表单提交的数据，PHP $_REQUEST属于PHP的超级全局变量
4.payload:include source.php(或hint.php)?/../../../../ffffllllaaaagggg
include $_REQUEST[&#39;file&#39;];中使用了include,为什么路径这样写，是因为我们的参数是有/../../../../这样的路径，所以符合最后一段话如果定义了路径，就会忽略/前的字符串而去找/../../../../ffffllllaaaagggg这个文件，php中include的用法
2.[GXYCTF2019]Ping Ping Ping 题目给了/?ip=后面应该是我们想要执行的语句。先ping一下:127.0.0.1;ls发现可以执行语句；
试试payload1:cat flag.php发现空格被过滤了；
空格过滤
  ${IFS}替换 $IFS$1替换 ${IFS替换 %20替换 &amp;lt;和&amp;lt;&amp;gt;重定向符替换 %09替换   一个个地试，发现{}被过滤了，同时flag也被过滤了，这时去看看index.php发现源码出来了；
/?ip= |\&amp;#39;|\&amp;#34;|\\|\(|\)|\[|\]|\{|\}/&amp;#34;, $ip, $match)){ echo preg_match(&amp;#34;/\&amp;amp;|\/|\?|\*|\&amp;lt;|[\x{00}-\x{20}]|\&amp;gt;|\&amp;#39;|\&amp;#34;|\\|\(|\)|\[|\]|\{|\}/&amp;#34;, $ip, $match); die(&amp;#34;fxck your symbol!&amp;#34;); } else if(preg_match(&amp;#34;/ /&amp;#34;, $ip)){ die(&amp;#34;fxck your space!&amp;#34;); } else if(preg_match(&amp;#34;/bash/&amp;#34;, $ip)){ die(&amp;#34;fxck your bash!&amp;#34;); } else if(preg_match(&amp;#34;/.*f.*l.*a.*g.*/&amp;#34;, $ip)){ die(&amp;#34;fxck your flag!</description>
    </item>
    
  </channel>
</rss>
