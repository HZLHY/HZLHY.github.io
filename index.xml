<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LHY&#39;s blogs</title>
    <link>https://hzlhy.github.io/</link>
    <description>Recent content on LHY&#39;s blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Mar 2021 19:52:27 +0800</lastBuildDate><atom:link href="https://hzlhy.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://hzlhy.github.io/about/about/</link>
      <pubDate>Fri, 26 Mar 2021 19:52:27 +0800</pubDate>
      
      <guid>https://hzlhy.github.io/about/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hugo_use</title>
      <link>https://hzlhy.github.io/ctf/hugo_use/</link>
      <pubDate>Fri, 26 Mar 2021 15:32:48 +0800</pubDate>
      
      <guid>https://hzlhy.github.io/ctf/hugo_use/</guid>
      <description>hugo使用方法（初步） 0x0 创建站点 使用 hugo new site &amp;quot;文件夹名字&amp;quot;，如 hugo new site blogs 就会创建一个名为blogs的文件夹，包含archetypes、content等文件夹。
0x1 创建文章 1.使用 hugo new xxx.md 创建一个名为 xxx.md 的文件，这样会直接将该文件创建于content文件夹中； 使用 hugo new post/xxx.md 会在 content 中的post文件夹中创建 xxx.md 文件。（注：在编辑文章时一定要把draft: true ——&amp;gt;draft: false,这样在生成时才会把文章生成到post文件夹中） 2.在完成创建后，运行 hugo 命令会生成相应的文件到public文件夹中；运行 hugo server 命令可以在本地 localhost:1313 查看变化（调试）或者（hugo server -t capsule -D）。 3.完成修改后需要上传到GitHub仓库，使用GitHub desktop上传文件即可。
0x2 标签与目录，导航栏 1.由于更换了主题，标签与目录都是采用数组的方法才行；
2.导航栏的的话，在content文件夹下面新建文件夹的话，会自动生成对应的导航链接。
0x3 添加图片 添加图片可以是使用 ![]() 语法括号中间为图片路劲，这里把图片放在static文件夹中，例如现在放在static中的hugo_use_imgs中，会在public中生成hugo_use_imgs文件夹,引用路径为 ../../hugo_use_imgs/xxx.jpg</description>
    </item>
    
    <item>
      <title>BUUCTF_WEB_part1</title>
      <link>https://hzlhy.github.io/ctf/buuctf_web_part1/</link>
      <pubDate>Fri, 26 Mar 2021 15:32:23 +0800</pubDate>
      
      <guid>https://hzlhy.github.io/ctf/buuctf_web_part1/</guid>
      <description>1.[BJDCTF2020]Easy MD5 0x0 一打开发现是一个查询页面，按F12，看到响应头Hint: select * from &#39;admin&#39; where password=md5($pass,true)初步以为是sql注入，试了一下（因为太菜+懒，也没怎么试就去找wp了……）；发现md5($pass,true)是一个知识点来的，可以参考这篇大佬的文章：大佬文章
语法：
md5(string,raw)
   参数 描述     string 必需。需要计算的字符串。   raw 可选。1.默认不写为FALSE。32位16进制的字符串；2.TRUE。16位原始二进制格式的字符串。     ；content: ffifdyop
hex: 276f722736c95d99e921722cf9ed621c
raw: &amp;lsquo;or&#39;6\xc9]\x99\xe9!r,\xf9\xedb\x1c
string: &amp;lsquo;or&#39;6]!r,b
 注意：当raw为true时，这里所说的原始二进制并不是普通的二进制0，1，而是像上面表里raw那样的；
（部分字符会乱码）
题目中 &#39;&#39;or&#39;6�]��!r,��b&#39;会返回true，是因为在MySQL里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，如password=‘xxx’ or ‘1xxxxxxxxx’，不只是1开头，只要是数字开头都可以。
0x1 回到题目，照上面所说的，输入 ffifdyop提交查询出现一个新的页面，查看源码
&amp;lt;!-- $a = $GET[&amp;#39;a&amp;#39;]; $b = $_GET[&amp;#39;b&amp;#39;]; if($a != $b &amp;amp;&amp;amp; md5($a) == md5($b)){ // wow, glzjin wants a girl friend. --&amp;gt; ==老朋友了，同时要使这两个的md5相等，这里抄了别人的wp，有两种方法：</description>
    </item>
    
    <item>
      <title>BUUCTF_WEB_part0</title>
      <link>https://hzlhy.github.io/ctf/buuctf_web_part0/</link>
      <pubDate>Thu, 25 Mar 2021 15:04:29 +0800</pubDate>
      
      <guid>https://hzlhy.github.io/ctf/buuctf_web_part0/</guid>
      <description>1.[HCTF]BUUCTF_warmup 查看源码发现source.php，访问发现是代码审计
1.PHP mb_substr()函数：
&amp;lt;?php echo mb_substr(&amp;quot;菜鸟教程&amp;quot;, 0, 2); // 输出：菜鸟 ?&amp;gt;
返回字符串的一部分
2.PHP mb_strpos()
查找字符串在另一个字符串中首次出现的位置
3.PHP $_REQUEST是用于收集HTML表单提交的数据，PHP $_REQUEST属于PHP的超级全局变量
4.payload:include source.php(或hint.php)?/../../../../ffffllllaaaagggg
include $_REQUEST[&#39;file&#39;];中使用了include,为什么路径这样写，是因为我们的参数是有/../../../../这样的路径，所以符合最后一段话如果定义了路径，就会忽略/前的字符串而去找/../../../../ffffllllaaaagggg这个文件，php中include的用法
2.[GXYCTF2019]Ping Ping Ping 题目给了/?ip=后面应该是我们想要执行的语句。先ping一下:127.0.0.1;ls发现可以执行语句；
试试payload1:cat flag.php发现空格被过滤了；
空格过滤
  ${IFS}替换 $IFS$1替换 ${IFS替换 %20替换 &amp;lt;和&amp;lt;&amp;gt;重定向符替换 %09替换   一个个地试，发现{}被过滤了，同时flag也被过滤了，这时去看看index.php发现源码出来了；
/?ip= |\&amp;#39;|\&amp;#34;|\\|\(|\)|\[|\]|\{|\}/&amp;#34;, $ip, $match)){ echo preg_match(&amp;#34;/\&amp;amp;|\/|\?|\*|\&amp;lt;|[\x{00}-\x{20}]|\&amp;gt;|\&amp;#39;|\&amp;#34;|\\|\(|\)|\[|\]|\{|\}/&amp;#34;, $ip, $match); die(&amp;#34;fxck your symbol!&amp;#34;); } else if(preg_match(&amp;#34;/ /&amp;#34;, $ip)){ die(&amp;#34;fxck your space!&amp;#34;); } else if(preg_match(&amp;#34;/bash/&amp;#34;, $ip)){ die(&amp;#34;fxck your bash!&amp;#34;); } else if(preg_match(&amp;#34;/.*f.*l.*a.*g.*/&amp;#34;, $ip)){ die(&amp;#34;fxck your flag!</description>
    </item>
    
    <item>
      <title>CTFshow_WEBrm361_372_SSTI</title>
      <link>https://hzlhy.github.io/ctf/ctfshow_webrm361_372_ssti/</link>
      <pubDate>Thu, 25 Mar 2021 15:03:34 +0800</pubDate>
      
      <guid>https://hzlhy.github.io/ctf/ctfshow_webrm361_372_ssti/</guid>
      <description>ctfshow web入门SSTI 常见的继承关系的方法有以下三种：
1.__base__：对象的一个基类，一般情况下是object
2.__mro__：获取对象的基类，只是这时会显示出整个继承链的关系，是一个列表，object
在最底层所以在列表中的最后，通过__mro__[-1]可以获取到
3.__subclasses__：继承此对象的子类，返回一个列表
基本过程：从变量-&amp;gt;对象-&amp;gt;基类-&amp;gt;子类遍历-&amp;gt;全局变量
4.__class__：返回调用的参数类型
5.__bases__：返回类型列表
6.__globals__：以字典类型返回当前的全部全局变量
7.__init__：用传入的参数来初始化实例，使用__globals__以字典返回内建模块
同时，也要考虑web的框架及模板引擎
一般SSTI题考察的web框架有：
1.flask
2.Tornado
3.Django</description>
    </item>
    
    <item>
      <title>CTFshow_WEBrm29_124</title>
      <link>https://hzlhy.github.io/ctf/ctfshow_webrm29_124/</link>
      <pubDate>Thu, 25 Mar 2021 15:03:09 +0800</pubDate>
      
      <guid>https://hzlhy.github.io/ctf/ctfshow_webrm29_124/</guid>
      <description>ctfshow web 入门命令执行 web29 &amp;lt;?php error_reporting(0); if(isset($_GET[&amp;#39;c&amp;#39;])){ $c = $_GET[&amp;#39;c&amp;#39;]; if(!preg_match(&amp;#34;/flag/i&amp;#34;, $c)){ eval($c); } }else{ highlight_file(__FILE__); } 知识点：通配符； 看到有eval()执行函数 过滤了flag ，可以使用通配符进行绕过。所以payload为：c=system(&#39;cat f*&#39;);返回的flag进行了隐藏，右键查看源码即可。 也可以通过文件包含来解决，payload： 先传入?c=echo &amp;quot;lhy&amp;quot;;?&amp;gt;ctfshow &amp;lt;?php system(&#39;ls&#39;);看到有flag.php文件（前面需要echo &amp;ldquo;lhy&amp;rdquo;;?&amp;gt;是因为传入c的时候表示一段代码的开始，?&amp;gt;结束后开始执行后面的代码），接下来的为?c=echo &amp;quot;lhy&amp;quot;; ?&amp;gt;ctfshow &amp;lt;?php include($_GET[&#39;url&#39;]);&amp;amp;url=php://filter/read=convert.base64-encode/resource=flag.php 补充：对于linux cat 和ca&#39;&amp;rsquo;t ca\t ca&amp;quot;&amp;ldquo;t效果是相同的，这样可以绕过字符的限制，如c=system(&#39;ca\t fla\g.php&#39;);
web30 &amp;lt;?php error_reporting(0); if(isset($_GET[&amp;#39;c&amp;#39;])){ $c = $_GET[&amp;#39;c&amp;#39;]; if(!preg_match(&amp;#34;/flag|system|php/i&amp;#34;, $c)){ eval($c); } }else{ highlight_file(__FILE__); } 知识点：反引号执行系统命令； 与29相比增加了对命令函数的过滤，命令执行函数有很多，如 system()
passthru()
exec()
shell_exec()
popen()
proc_open()
pcntl_exec()
反引号
只有system函数是有回显的，其它函数可以通过echo等显示，这里采用反引号绕过 payload1:c=echo `cat f*`;
payload2:?c=passthru(&amp;quot;cat f*&amp;quot;);
还可以采用文件包含：
payload3:?c=echo &amp;quot;lhy &amp;quot;; include($_GET[&#39;url&#39;]); ?</description>
    </item>
    
  </channel>
</rss>
